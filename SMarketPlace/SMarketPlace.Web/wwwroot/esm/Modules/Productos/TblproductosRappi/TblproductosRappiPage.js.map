{
  "version": 3,
  "sources": ["../../../../../Modules/Productos/TblproductosRappi/TblproductosRappiPage.ts", "../../../../../Modules/Productos/TblproductosRappi/TblproductosRappiGrid.ts", "../../../../../Modules/Productos/TblproductosRappi/TblproductosRappiDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { TblproductosRappiGrid } from './TblproductosRappiGrid';\r\n\r\nexport default function pageInit() {\r\n    initFullHeightGridPage(new TblproductosRappiGrid($('#GridDiv')).element);\r\n}", "import { Decorators, EntityGrid, GridRowSelectionMixin, ToolButton } from '@serenity-is/corelib';\r\nimport { TblproductosRappiColumns, TblproductosRappiRow, TblproductosRappiService } from '../../ServerTypes/Productos';\r\nimport { TblproductosRappiDialog } from './TblproductosRappiDialog';\r\nimport { ImportExcelDialog } from 'Modules/ImportExcel/ImportExcelDialog'\r\nimport { ExcelExportHelper, PdfExportHelper, ReportHelper } from \"@serenity-is/extensions\";\r\nimport { Column } from '@serenity-is/sleekgrid';\r\n\r\n@Decorators.registerClass('SMarketPlace.Productos.TblproductosRappiGrid')\r\nexport class TblproductosRappiGrid extends EntityGrid<TblproductosRappiRow, any> {\r\n\r\n    private rowSelection: GridRowSelectionMixin;\r\n\r\n    protected getColumnsKey() { return TblproductosRappiColumns.columnsKey; }\r\n    protected getDialogType() { return TblproductosRappiDialog; }\r\n    protected getRowDefinition() { return TblproductosRappiRow; }\r\n    protected getService() { return TblproductosRappiService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n        this.rowSelection = new GridRowSelectionMixin(this);\r\n    }\r\n\r\n//    protected createToolbarExtensions() {\r\n//        super.createToolbarExtensions();\r\n      \r\n//    }\r\n\r\n    protected getColumns(): Column[] {\r\n        let columns = super.getColumns();\r\n/*        let extOptions = this.get_ExtGridOptions();*/\r\n        columns.splice(0, 0, GridRowSelectionMixin.createSelectColumn(() => this.rowSelection));\r\n        return columns;\r\n    }\r\n\r\n\r\n    protected getButtons(): ToolButton[] {\r\n        var buttons = super.getButtons();\r\n\r\n        buttons.push(ExcelExportHelper.createToolButton({\r\n            grid: this,\r\n            service: TblproductosRappiService.baseUrl + '/ListExcel',\r\n            onViewSubmit: () => this.onViewSubmit(),\r\n            separator: true\r\n        }));\r\n\r\n        buttons.push(PdfExportHelper.createToolButton({\r\n            grid: this,\r\n            onViewSubmit: () => this.onViewSubmit()\r\n        }));\r\n\r\n        /*\tif (Q.Authorization.hasPermission(this.getModifyPermisison())) {*/\r\n        buttons.push({\r\n            title: \"Eliminar\",\r\n            cssClass: \"text-red\",\r\n            icon: \"fa-times text-red\",\r\n            onClick: () => {\r\n                let selectedKeys = this.rowSelection.getSelectedKeys();\r\n                if (selectedKeys != null && typeof selectedKeys != 'undefined' && selectedKeys.length > 0) {\r\n                    Q.confirm(\r\n                        \"Confirma borrado de Productos ? \",\r\n                        () => {\r\n                            TblproductosRappiService.DeleteMulti({ Ids: selectedKeys }, res => {\r\n                                Q.notifySuccess(\"Productos Eliminados\");\r\n                                this.refresh();\r\n                            });\r\n                        },\r\n                        {\r\n                            onNo: () => {\r\n                                Q.notifyInfo(\"Productos no Eliminados\");\r\n                            },\r\n                            onCancel: () => {\r\n                                Q.notifyError(\"Operacion Cancelada\");\r\n                            },\r\n                            dialogClass: 's-MessageDialog s-WarningDialog'\r\n                        });\r\n                }\r\n\r\n                else {\r\n                    Q.warning(\"Seleccionar un producto para eliminar\");\r\n                }\r\n            }\r\n        });\r\n\t\t\t/*}*/\r\n\r\n        // add our import button\r\n        buttons.push({\r\n            title: 'Import From Excel',\r\n            cssClass: 'export-xlsx-button',\r\n            onClick: () => {\r\n                // open import dialog, let it handle rest\r\n                var dialog = new ImportExcelDialog({\r\n                });\r\n                dialog.element.on('dialogclose', () => {\r\n                    this.refresh();\r\n                    dialog = null;\r\n                });\r\n                dialog.TipoMP = 'Rappi'\r\n                dialog.dialogOpen();\r\n            }\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n}", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { TblproductosRappiForm, TblproductosRappiRow, TblproductosRappiService } from '../../ServerTypes/Productos';\r\n\r\n@Decorators.registerClass('SMarketPlace.Productos.TblproductosRappiDialog')\r\nexport class TblproductosRappiDialog extends EntityDialog<TblproductosRappiRow, any> {\r\n    protected getFormKey() { return TblproductosRappiForm.formKey; }\r\n    protected getRowDefinition() { return TblproductosRappiRow; }\r\n    protected getService() { return TblproductosRappiService.baseUrl; }\n    protected getModifyPermisison() { return TblproductosRappiRow.updatePermission; }\r\n    protected getReadPermisison() { return TblproductosRappiRow.readPermission }\r\n    protected getDeletePermission() { return TblproductosRappiRow.deletePermission; }\r\n    protected getInsertPermission() { return TblproductosRappiRow.insertPermission; }\r\n    protected getUpdatePermission() { return TblproductosRappiRow.updatePermission; }\r\n\r\n    protected form = new TblproductosRappiForm(this.idPrefix);\r\n}"],
  "mappings": "mQAAC,IAAAA,EAAuC,SCAxC,IAAAC,EAA0E,SCA1E,IAAAC,EAAyC,SAIlC,IAAMC,EAAN,cAAsC,cAAwC,CAA9E,kCAUH,KAAU,KAAO,IAAIC,EAAsB,KAAK,QAAQ,EAT9C,YAAa,CAAE,OAAOA,EAAsB,OAAS,CACrD,kBAAmB,CAAE,OAAOC,CAAsB,CAClD,YAAa,CAAE,OAAOC,EAAyB,OAAS,CACxD,qBAAsB,CAAE,OAAOD,EAAqB,gBAAkB,CACtE,mBAAoB,CAAE,OAAOA,EAAqB,cAAe,CACjE,qBAAsB,CAAE,OAAOA,EAAqB,gBAAkB,CACtE,qBAAsB,CAAE,OAAOA,EAAqB,gBAAkB,CACtE,qBAAsB,CAAE,OAAOA,EAAqB,gBAAkB,CAGpF,EAXaE,EAAAJ,EAAA,2BAAAA,EAANK,EAAA,CADN,aAAW,cAAc,gDAAgD,GAC7DL,GDAb,IAAAM,EAAiE,SAI1D,IAAMC,EAAN,cAAoC,YAAsC,CAS7E,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,EACf,KAAK,aAAe,IAAI,wBAAsB,IAAI,CACtD,CARU,eAAgB,CAAE,OAAOC,EAAyB,UAAY,CAC9D,eAAgB,CAAE,OAAOC,CAAyB,CAClD,kBAAmB,CAAE,OAAOC,CAAsB,CAClD,YAAa,CAAE,OAAOC,EAAyB,OAAS,CAYxD,YAAuB,CAC7B,IAAIC,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,OAAO,EAAG,EAAG,wBAAsB,mBAAmB,IAAM,KAAK,YAAY,CAAC,EAC/EA,CACX,CAGU,YAA2B,CACjC,IAAIC,EAAU,MAAM,WAAW,EAE/B,OAAAA,EAAQ,KAAK,oBAAkB,iBAAiB,CAC5C,KAAM,KACN,QAASF,EAAyB,QAAU,aAC5C,aAAc,IAAM,KAAK,aAAa,EACtC,UAAW,EACf,CAAC,CAAC,EAEFE,EAAQ,KAAK,kBAAgB,iBAAiB,CAC1C,KAAM,KACN,aAAc,IAAM,KAAK,aAAa,CAC1C,CAAC,CAAC,EAGFA,EAAQ,KAAK,CACT,MAAO,WACP,SAAU,WACV,KAAM,oBACN,QAAS,IAAM,CACX,IAAIC,EAAe,KAAK,aAAa,gBAAgB,EACjDA,GAAgB,MAAQ,OAAOA,GAAgB,aAAeA,EAAa,OAAS,EACpF,EAAE,QACE,mCACA,IAAM,CACFH,EAAyB,YAAY,CAAE,IAAKG,CAAa,EAAGC,GAAO,CAC/D,EAAE,cAAc,sBAAsB,EACtC,KAAK,QAAQ,CACjB,CAAC,CACL,EACA,CACI,KAAM,IAAM,CACR,EAAE,WAAW,yBAAyB,CAC1C,EACA,SAAU,IAAM,CACZ,EAAE,YAAY,qBAAqB,CACvC,EACA,YAAa,iCACjB,CAAC,EAIL,EAAE,QAAQ,uCAAuC,CAEzD,CACJ,CAAC,EAIDF,EAAQ,KAAK,CACT,MAAO,oBACP,SAAU,qBACV,QAAS,IAAM,CAEX,IAAIG,EAAS,IAAIC,EAAkB,CACnC,CAAC,EACDD,EAAO,QAAQ,GAAG,cAAe,IAAM,CACnC,KAAK,QAAQ,EACbA,EAAS,IACb,CAAC,EACDA,EAAO,OAAS,QAChBA,EAAO,WAAW,CACtB,CACJ,CAAC,EAEMH,CACX,CACJ,EA/FaK,EAAAZ,EAAA,yBAAAA,EAANa,EAAA,CADN,aAAW,cAAc,8CAA8C,GAC3Db,GDLE,SAARc,GAA4B,IAC/B,0BAAuB,IAAIC,EAAsB,EAAE,UAAU,CAAC,EAAE,OAAO,CAC3E,CAFwBC,EAAAF,EAAA",
  "names": ["import_q", "import_corelib", "import_corelib", "TblproductosRappiDialog", "TblproductosRappiForm", "TblproductosRappiRow", "TblproductosRappiService", "__name", "__decorateClass", "import_extensions", "TblproductosRappiGrid", "container", "TblproductosRappiColumns", "TblproductosRappiDialog", "TblproductosRappiRow", "TblproductosRappiService", "columns", "buttons", "selectedKeys", "res", "dialog", "ImportExcelDialog", "__name", "__decorateClass", "pageInit", "TblproductosRappiGrid", "__name"]
}
